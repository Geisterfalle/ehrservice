/*
 * Copyright (c) 2015 Christian Chevalley
 * This file is part of Project Ethercis
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ethercis.aql.sql.queryImpl;

import org.openehr.rm.common.archetyped.Locatable;

import java.util.StringTokenizer;

/**
 * see http://www.openehr.org/releases/trunk/UML/ for field identification
 * Created by christian on 5/11/2016.
 */
public class EntryAttributeMapper {

    //from Locatable
    private static String toCamelCase(String underscoreSeparated) {
        if( ! underscoreSeparated.contains("_")) {
            return underscoreSeparated;
        }
        StringTokenizer tokens = new StringTokenizer(underscoreSeparated, "_");
        StringBuffer buf = new StringBuffer();
        while (tokens.hasMoreTokens()) {
            String word = tokens.nextToken();
            if (buf.length() == 0) {
                buf.append(word);
            } else {
                buf.append(word.substring(0, 1).toUpperCase());
                buf.append(word.substring(1));
            }
        }
        return buf.toString();
    }

    /**
     * do a simple toCamelCase translation... and prefix all with /value :-)
     * @param attribute
     * @return
     */
    public static String map(String attribute){
        StringBuffer stringBuffer = new StringBuffer();

        String[] fields = attribute.split("/");

        if (fields.length <= 1)
            return null; //this happens when a non specified value is queried f.e. the whole json body

        stringBuffer.append("/value,");
        for (int i=1; i < fields.length; i++){
            stringBuffer.append(toCamelCase(fields[i]));
            if (i < fields.length - 1)
                stringBuffer.append(",");
        }
        return stringBuffer.toString();
    }
}
