// Author: Bostjan Lah
// (c) Copyright, Marand, http://www.marand.com
// Licensed under LGPL: http://www.gnu.org/copyleft/lesser.html
// Based on AQL grammar by Ocean Informatics: http://www.openehr.org/wiki/download/attachments/2949295/EQL_v0.6.grm?version=1&modificationDate=1259650833000
grammar Aql;

//options {
//	output=AST;
//	ASTLabelType=CommonTree;
//	backtrack=true;
//	memorize=true;
//}
//
//tokens {
//	ORDERDESC,
//	ORDERASC
//}

//@header {
//package com.marand.thinkehr.aql.antlr;
//import com.marand.thinkehr.aql.AqlRecognitionException;
//}
//
//@lexer::header{
//package com.marand.thinkehr.aql.antlr;
//import com.marand.thinkehr.aql.AqlRecognitionException;
//}

//@members{
//public void displayRecognitionError(String[] tokenNames, RecognitionException e)
//{
//  throw new AqlRecognitionException(e);
//}
//}

// Rule Definitions
//query
//        : selectBinder  fromBinder
//	    | selectBinder  fromBinder where
//        | selectBinder fromBinder orderBy   // is this allowed?
//        | selectBinder  fromBinder where orderBy ;
query	:	queryExpr ;

queryExpr : selectBinder fromBinder (where)? (orderBy)? EOF;

selectBinder
        : SELECT selectExpr
        | SELECT topExpr selectExpr ;
//selectBinder	:	SELECT top selectExpr -> (SELECT top? selectExpr);

topExpr
        : TOP INTEGER
        | TOP INTEGER BACKWARD
        | TOP INTEGER FORWARD ;
//top	:	TOP INTEGER FORWARD? -> (TOP INTEGER)
//	|	TOP INTEGER BACKWARD -> (TOP INTEGER BACKWARD);


where
        : WHERE identifiedExpr ;
//where	:	WHERE identifiedExpr -> (WHERE identifiedExpr);

orderBy 
        : ORDERBY orderBySeq ;
//orderBy	:	ORDERBY orderBySeq -> ^(ORDERBY orderBySeq);

orderBySeq  
        : orderByExpr
		| orderByExpr COMMA orderBySeq ;
//orderBySeq :	orderByExpr (','! orderByExpr)*;

orderByExpr 
        : identifiedPath
		| identifiedPath DESCENDING
		| identifiedPath ASCENDING
		| identifiedPath DESC
		| identifiedPath ASC ;
//orderByExpr :	identifiedPath (DESCENDING|DESC) -> ^(ORDERDESC identifiedPath)
//	|	identifiedPath (ASCENDING|ASC)? -> ^(ORDERASC identifiedPath);

selectExpr 
        : identifiedPathSeq;
//selectExpr 	:	identifiedPathSeq;

//! When multiple paths provided, each identifiedPath must represent an object of type DataValue
identifiedPathSeq 
            : identifiedPath
			| identifiedPath AS IDENTIFIER
			| identifiedPath COMMA identifiedPathSeq
			| identifiedPath AS IDENTIFIER COMMA identifiedPathSeq ;
//identifiedPathSeq
//	:	selectVar (','! selectVar)*;
//selectVar
//	:	identifiedPath^ asIdentifier?;
//
//asIdentifier
//	:	AS IDENTIFIER;
		
fromBinder
        : FROM fromExpr		// stop or/and without root class
	    | FROM fromEHR (CONTAINS containsExpression)?
        | FROM ContainsOr;
//        | FROM ehrContains;
//		| FROM ContainsOr ;
//fromBinder	: FROM fromExpr -> ^(FROM fromExpr)
//	| FROM ehrContains -> ^(FROM ehrContains);

fromEHR 
        : EHR standardPredicate
        | EHR IDENTIFIER standardPredicate
        | EHR IDENTIFIER ;

fromExpr
        : containsExpression;

//====== CONTAINMENT
containsExpression
        : containExpressionBool (BooleanOperator containsExpression)?;

containExpressionBool
        : contains
        | OPEN_PARENTHESIS containsExpression CLOSE_PARENTHESIS;

contains
        : simpleClassExpr (CONTAINS containsExpression)?;

//======= END CONTAINMENT

identifiedExpr
 	    : identifiedExprAnd ((OR|XOR) identifiedExprAnd)*;

identifiedExprAnd
	    : identifiedEquality (AND identifiedEquality)*;


identifiedEquality 
        : identifiedOperand COMPARABLEOPERATOR identifiedOperand
	    | identifiedOperand MATCHES OPEN_CURLY matchesOperand CLOSE_CURLY
        | identifiedOperand MATCHES REGEXPATTERN
        | NOT identifiedEquality
        | NOT IN OPEN_PARENTHESIS queryExpr CLOSE_PARENTHESIS
        | EXISTS identifiedPath ;
//identifiedEquality
// 	: identifiedOperand ((MATCHES^ '{'! matchesOperand '}'!)|(COMPARABLEOPERATOR^ identifiedOperand))
//        | EXISTS identifiedPath -> ^(EXISTS identifiedPath)
//        | '('! identifiedExpr ')'!
//        | NOT^ identifiedEquality
// 	;
// 	| identifiedOperand 'matches' '{' matchesOperand '}'
//        | identifiedOperand 'matches' REGEXPATTERN
//        | 'EXISTS' identifiedPath;

identifiedOperand 
        : operand 
        | identifiedPath ;
//identifiedOperand
// 	: operand | identifiedPath;
//!<identifiedOperand> ::= <Operand> | <RelativePath>

identifiedPath 
        : IDENTIFIER
        | IDENTIFIER predicate
        | IDENTIFIER SLASH objectPath
        | IDENTIFIER predicate SLASH objectPath ;
//identifiedPath
//	 : IDENTIFIER predicate? ('/' objectPath)? -> ^(IDENTIFIER predicate? objectPath?);
//!		| Identifer <AbsolutePath>
//!		| Identifer <predicate> <AbsolutePath>


predicate 
        : nodePredicate;
//predicate
// 	: nodePredicate;

nodePredicate
        : OPEN_BRACKET nodePredicateOr CLOSE_BRACKET;
//nodePredicate
// 	: OPENBRACKET nodePredicateOr CLOSEBRACKET;

nodePredicateOr
        : nodePredicateAnd
        | nodePredicateOr OR nodePredicateAnd ;
//nodePredicateOr
// 	: nodePredicateAnd (OR^ nodePredicateAnd)*;

nodePredicateAnd
        : nodePredicateComparable
        | nodePredicateAnd AND nodePredicateComparable ;

//nodePredicateAnd
// 	: nodePredicateComparable (AND^ nodePredicateComparable)*;

nodePredicateComparable
        : predicateOperand COMPARABLEOPERATOR predicateOperand
        | NODEID
        | NODEID COMMA STRING        // <NodeId> and name/value = <String> shortcut
        | NODEID COMMA PARAMETER     // <NodeId> and name/value = <Parameter> shortcut
        | nodePredicateRegEx     // /items[{/at0001.*/}], /items[at0001 and name/value matches {//}]
        | ARCHETYPEID
        | ARCHETYPEID COMMA STRING        // <NodeId> and name/value = <String> shortcut
        | ARCHETYPEID COMMA PARAMETER ;   // <NodeId> and name/value = <Parameter> shortcut
//nodePredicateComparable
// 	: NODEID (COMMA^ (STRING|PARAMETER))?
// 	| ARCHETYPEID (COMMA^ (STRING|PARAMETER))?
// 	| predicateOperand ((COMPARABLEOPERATOR^ predicateOperand)|(MATCHES^ REGEXPATTERN))
//        | REGEXPATTERN     //! /items[{/at0001.*/}], /items[at0001 and name/value matches {//}]
//        ;

nodePredicateRegEx
        : REGEXPATTERN
        | predicateOperand MATCHES REGEXPATTERN ;

//nodePredicateRegEx
// 	: REGEXPATTERN
// 	| predicateOperand MATCHES^ REGEXPATTERN;

matchesOperand
        : valueListItems
        | URIVALUE ;

//matchesOperand
// 	: valueListItems | URIVALUE;

//! <ValueList> ::= '{'<valueListItems>'}'
valueListItems
        : operand
        | operand COMMA valueListItems ;

//valueListItems
// 	: operand (','! operand)*;

//URI     ::= '{' UriValue '}'
//uri 	: '{' URIVALUE '}';

//
//Archetypepredicate
// 	: OPENBRACKET (ARCHETYPEID|PARAMETER|REGEXPATTERN) CLOSEBRACKET;

//archetypeId
//        : ARCHETYPEID;
	
//<Versionpredicate> ::= '[' <VersionpredicateOptions> ']'
versionpredicate
 	    : OPEN_BRACKET versionpredicateOptions CLOSE_BRACKET;

//<VersionpredicateOptions> ::= 'latest_version' | 'all_versions'
versionpredicateOptions
        : 'latest_version'
        | ALL_VERSIONS;

//<Standardpredicate> ::= '[' <predicateExpr> ']'
standardPredicate
        : OPEN_BRACKET predicateExpr CLOSE_BRACKET;

//<predicateExpr> ::= <predicateOr>
predicateExpr
        : predicateOr;

//predicateOr : predicateAnd
//            | predicateOr OR predicateAnd ;
predicateOr
        : predicateAnd (OR predicateAnd)*;
//// 	: (predicateOr 'or')? predicateAnd; !!!

//predicateAnd : predicateEquality
//             | predicateAnd (AND predicateEquality)* ;
predicateAnd
        : predicateEquality (AND predicateEquality)*;
// 	: (predicateAnd 'and')? predicateEquality; !!!

//<predicateEquality> ::= <predicateOperand> ComparableOperator <predicateOperand>
predicateEquality
        : predicateOperand COMPARABLEOPERATOR predicateOperand;

//<predicateOperand> ::= !Identifier
//			!| Identifier PathItem
//                     | <ObjectPath>
//                     | <Operand>
predicateOperand
        : objectPath | operand;

//<Operand> ::= String | Integer | Float | Date | Parameter | Boolean
operand
        : STRING
        | INTEGER
        | FLOAT
        | DATE
        | PARAMETER
        | BOOLEAN;


//<ObjectPath> ::=  <PathPart>
//                | <PathPart> '/' <ObjectPath>
objectPath
        : pathPart (SLASH pathPart)*;


//<PathPart> ::= Identifier
//           | Identifier <predicate>
pathPart
        : IDENTIFIER predicate?;


BooleanOperator
        : OR
        | XOR
        | AND;
	
//<ClassExpr>::=   <SimpleClassExpr>
//		   | '(' <SimpleClassExpr> <ContainsExpr> ')'
//		   | <SimpleClassExpr> <ContainsExpr>
classExpr
 	    : OPEN_PARENTHESIS simpleClassExpr CLOSE_PARENTHESIS
	    | simpleClassExpr
	    ;

//<SimpleClassExpr>::= Identifier							! RM_TYPE_NAME
//               | Identifier Identifier					! RM_TYPE_NAME identifier
//               | <ArchetypedClassExpr>
//		 | <VersionedClassExpr>
//		 | <VersionClassExpr>
//		 ! | <IdentifiedObjectExpr>                           ! need to be used once VersionedClassExpr is removed
simpleClassExpr
	    : IDENTIFIER IDENTIFIER?					//! RM_TYPE_NAME .. RM_TYPE_NAME identifier
        | archetypedClassExpr
        | versionedClassExpr
	    | versionClassExpr;
//		 ! | <IdentifiedObjectExpr>                           ! need to be used once VersionedClassExpr is removed

//<ArchetypedClassExpr>::= Identifier <Archetypepredicate>	! RM_TYPE_NAME [archetype_id]
//               | Identifier Identifier <Archetypepredicate>	! RM_TYPE_NAME identifier [archetype_id]
archetypedClassExpr
 	    : IDENTIFIER (IDENTIFIER)? (ARCHETYPE_PREDICATE)?;	//! RM_TYPE_NAME identifier? [archetype_id]

//! need to be used once VersionedClassExpr is removed
//!<IdentifiedObjectExpr>::= Identifier <Standardpredicate>	! RM_TYPE_NAME [path operator operand]
//!               | Identifier Identifier <Standardpredicate>	! RM_TYPE_NAME identifier [path operator operand]
//<VersionedClassExpr>::= 'VERSIONED_OBJECT'
//               | 'VERSIONED_OBJECT' Identifier
//               | 'VERSIONED_OBJECT' <Standardpredicate>
//               | 'VERSIONED_OBJECT' Identifier <Standardpredicate>
versionedClassExpr
 	    : VERSIONED_OBJECT (IDENTIFIER)? (standardPredicate)?;

//<VersionClassExpr>::= 'VERSION'
//               | 'VERSION' Identifier
//               | 'VERSION' <Standardpredicate>
//               | 'VERSION' Identifier <Standardpredicate>
//		 | 'VERSION' <Versionpredicate>
//               | 'VERSION' Identifier <Versionpredicate>
versionClassExpr
 	    : VERSION (IDENTIFIER)? (standardPredicate|versionpredicate)?;

//
// LEXER PATTERNS
//

WS  :   ( ' '
        | '\t'
        | '\r'
        | '\n'
        ) -> skip
    ;

SELECT : ('S'|'s')('E'|'e')('L'|'l')('E'|'e')('C'|'c')('T'|'t') ;
TOP : ('T'|'t')('O'|'o')('P'|'p') ;
FORWARD : ('F'|'f')('O'|'o')('R'|'r')('W'|'w')('A'|'a')('R'|'r')('D'|'d') ;
BACKWARD : ('B'|'b')('A'|'a')('C'|'c')('K'|'k')('W'|'w')('A'|'a')('R'|'r')('D'|'d') ;
AS : ('A'|'a')('S'|'s') ;
CONTAINS : ('C'|'c')('O'|'o')('N'|'n')('T'|'t')('A'|'a')('I'|'i')('N'|'n')('S'|'s') ;
WHERE : ('W'|'w')('H'|'h')('E'|'e')('R'|'r')('E'|'e') ;
ORDERBY : ('O'|'o')('R'|'r')('D'|'d')('E'|'e')('R'|'r')(' ')('B'|'b')('Y'|'y') ;
FROM : ('F'|'f')('R'|'r')('O'|'o')('M'|'m') ;
DESCENDING : ('D'|'d')('E'|'e')('S'|'s')('C'|'c')('E'|'e')('N'|'n')('D'|'d')('I'|'i')('N'|'n')('G'|'g') ;
ASCENDING : ('A'|'a')('S'|'s')('C'|'c')('E'|'e')('N'|'n')('D'|'d')('I'|'i')('N'|'n')('G'|'g') ;
DESC : ('D'|'d')('E'|'e')('S'|'s')('C'|'c') ;
ASC : ('A'|'a')('S'|'s')('C'|'c') ;
EHR : 'EHR';
AND : ('A'|'a')('N'|'n')('D'|'d') ;
OR : ('O'|'o')('R'|'r') ;
XOR : ('X'|'x')('O'|'o')('R'|'r') ;
NOT : ('N'|'n')('O'|'o')('T'|'t') ;
IN : ('I'|'i')('N'|'n');
MATCHES : ('M'|'m')('A'|'a')('T'|'t')('C'|'c')('H'|'h')('E'|'e')('S'|'s') ;
EXISTS: ('E'|'e')('X'|'x')('I'|'i')('S'|'s')('T'|'t')('S'|'s') ;
VERSION	:	'VERSION';
VERSIONED_OBJECT	:	'VERSIONED_OBJECT';
ALL_VERSIONS
	:	'all_versions';
	
fragment
ESC_SEQ
    :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
    |   UNICODE_ESC
    |   OCTAL_ESC
    ;

fragment
OCTAL_ESC
    :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7')
    ;

fragment
UNICODE_ESC
    :   '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    ;

fragment
HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ;

QUOTE	:	'\'';

fragment
DIGIT	:	'0'..'9';

fragment
HEXCHAR	:	 DIGIT|'a'|'A'|'b'|'B'|'c'|'C'|'d'|'D'|'e'|'E'|'f'|'F';

fragment
LETTER
	:	'a'..'z'|'A'..'Z';

fragment
ALPHANUM
	:	LETTER|DIGIT;

fragment
LETTERMINUSA
	:	'b'..'z'|'B'..'Z';

fragment
LETTERMINUST
	:	'a'..'s'|'A'..'S'|'u'..'z'|'U'..'Z';

fragment
IDCHAR	:	ALPHANUM|'_';

fragment
IDCHARMINUST
	:	LETTERMINUST|DIGIT|'_';

fragment
URISTRING
	:	ALPHANUM|'_'|'-'|'/'|':'|'.'|'?'|'&'|'%'|'$'|'#'|'@'|'!'|'+'|'='|'*';

fragment
REGEXCHAR
	:	URISTRING|'('|')'|'\\'|'^'|'{'|'}'|']'|'[';


// Terminal Definitions

//Boolean     = 'true' | 'false'
BOOLEAN	:	'true' | 'false' | 'TRUE' | 'FALSE' ;

//!NodeId      = 'a''t'{Digit}{Digit}{Digit}{Digit}
//! conflict with Identifier
//!NodeId	     = 'at'({Digit}{Digit}{Digit}{Digit}('.0'*('.'{NonZeroDigit}{Digit}*)+|('.'{NonZeroDigit}{Digit}*)*)|'0''.0'*('.'{NonZeroDigit}{Digit}*)+|('.'{NonZeroDigit}{Digit}*)+)
//NodeId	     = 'at'({Digit}+('.'{Digit}+)*)
//NODEID	:	'at' DIGIT+ ('.' DIGIT+)*;
NODEID	:	'at' DIGIT+ ('.' DIGIT+)*; // DIGIT DIGIT DIGIT DIGIT;

//!Identifier  = {Letter}({Alphanumeric}|'_')*   ! Conflicts with UID
//!Identifier  = {Letter}{IdChar}*   ! Conflicts with extended NodeId
//! restricted to allow only letters after the 4th character due to conflict with extended NodeId
//!Identifier  = {Letter}{IdChar}?{IdChar}?{IdChar}?({Letter}|'_')*  !Conficts with NodeId which may have any length of digit, such as at0.9
//Identifier = {LetterMinusA}{IdCharMinusT}?{IdChar}* | 'a''t'?(({letter}|'_')*|{LetterMinusT}{Alphanumeric}*)
// ???
IDENTIFIER
	:	('a'|'A') (ALPHANUM|'_')*
	| 	LETTERMINUSA IDCHAR*
	;

//!PathItem = '/'{Letter}({Alphanumeric}|'_')*

//Integer     = {Digit}+
INTEGER	:	'-'? DIGIT+;

//Float       = {Digit}+'.'{Digit}+
FLOAT	:	'-'? DIGIT+ '.' DIGIT+;

//Date        = ''{Digit}{Digit}{Digit}{Digit}'-'{Digit}{Digit}'-'{Digit}{Digit}''
DATE	:	'\'' DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT 'T' DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT '.' DIGIT DIGIT DIGIT '+' DIGIT DIGIT DIGIT DIGIT '\'';

//!Parameter   = '$'{letter}({Alphanumeric}|'_')*
//Parameter   = '$'{letter}{IdChar}*
PARAMETER :	'$' LETTER IDCHAR*;

//! could constrain UID further
//UniqueId    = {digit}+('.'{digit}+)+'.'{digit}+  ! OID
//          | {Hex Char}+('-'{Hex Char}+)+       ! UUID
UNIQUEID:	DIGIT+ ('.' DIGIT+)+ '.' DIGIT+  // OID
            | HEXCHAR+ ('-' HEXCHAR+)+       // UUID
	;


ARCHETYPE_PREDICATE
        : '[' ARCHETYPEID ']'
        | '[' PARAMETER ']'
        | '[' REGEXPATTERN ']' ;

//! could constrain ArchetypeId further
//!ArchetypeId = {Letter}+'-'{Letter}+'-'({Letter}|'_')+'.'({Letter}|'_'|'-')+'.v'{Digit}+('.'{Digit}+)?  ! not allow a number in archetype id concept, such as openEHR-EHR-OBSERVATION.laboratory-hba1c.v1
//ArchetypeId = {Letter}+'-'{Letter}+'-'({Letter}|'_')+'.'({IdChar}|'-')+'.v'{Digit}+('.'{Digit}+)?
ARCHETYPEID
	:	LETTER+ '-' LETTER+ '-' (LETTER|'_')+ '.' (IDCHAR|'-')+ '.v' DIGIT+ ('.' DIGIT+)?
	;

//ComparableOperator = '=' | '!=' | '>' | '>=' | '<' | '<='
COMPARABLEOPERATOR
	:	'=' | '!=' | '>' | '>=' | '<' | '<='
	;

//UriValue   = {Letter}+'://'({UriString}|'['|']'|', '''|'')*
//            |{Letter}+':'({UriString}|'['|']'|'')*
URIVALUE: LETTER+ '://' (URISTRING|'['|']'|', \''|'\'')*
//	| LETTER+ ':' (URISTRING|'['|']'|'\'')*
        ;

//RegExPattern = '{/'{RegExChar}+'/}'
REGEXPATTERN
	:	'{/' REGEXCHAR+ '/}';

//String      = '"'{String Char}*'"'
  //          | ''{String Char}*''
STRING
    	:  '\'' ( ESC_SEQ | ~('\\'|'\'') )* '\''
    	|  '"' ( ESC_SEQ | ~('\\'|'"') )* '"'
    	;

SLASH	:	'/';

COMMA	:	',';

SEMICOLON : ';';

OPEN_BRACKET :	'[';
CLOSE_BRACKET :	']';
	
OPEN_PARENTHESIS	:	'(';
CLOSE_PARENTHESIS	:	')';

OPEN_CURLY :	'{';
CLOSE_CURLY :	'}';
