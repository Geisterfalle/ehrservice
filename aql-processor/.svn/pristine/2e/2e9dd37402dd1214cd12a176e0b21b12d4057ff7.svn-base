/*
 * Copyright (c) 2015 Christian Chevalley
 * This file is part of Project Ethercis
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ethercis.aql.compiler;

import com.ethercis.aql.parser.AqlLexer;
import com.ethercis.aql.parser.AqlParser;
import com.ethercis.aql.containment.IdentifierMapper;
import com.ethercis.aql.containment.ContainmentSet;
import com.ethercis.aql.definition.VariableDefinition;
import com.ethercis.aql.definition.FromDefinition;
import com.ethercis.aql.sql.binding.ContainBinder;
import com.ethercis.aql.sql.binding.FromBinder;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.apache.log4j.Logger;
import org.jooq.DSLContext;
import org.jooq.Select;

import java.util.List;

/**
 * Created by christian on 4/1/2016.
 */
public class QueryParser {

    private Logger log = Logger.getLogger(QueryParser.class);

    //this is the list of nested sets from the CONTAINS expressions
    private List<ContainmentSet> nestedSets;

    private ANTLRInputStream antlrInputStream;
    private Lexer aqlLexer;
    private AqlParser aqlParser;
    private ParseTree parseTree;
    private String containClause;
    private Select<?> fromClause;
    private String selectClause;
    private String whereClause;
    private IdentifierMapper identifierMapper;
    ParseTreeWalker walker = new ParseTreeWalker();
    List<VariableDefinition> variables;

    private DSLContext context;

    public QueryParser(DSLContext context, String query){
        this.antlrInputStream = new ANTLRInputStream(query);
        this.aqlLexer = new AqlLexer(antlrInputStream);
        CommonTokenStream commonTokenStream = new CommonTokenStream(aqlLexer);
        this.aqlParser = new AqlParser(commonTokenStream);

        //define our own error listener (default one just display a message on System.err
        aqlLexer.removeErrorListeners();
        aqlLexer.addErrorListener(AqlErrorHandler.INSTANCE);
        aqlParser.removeErrorListeners();
        aqlParser.addErrorListener(AqlErrorHandler.INSTANCE);

        this.parseTree = aqlParser.query(); //begin parsing at query rule
        this.context = context;
    }

    public void dump(){
        log.debug(parseTree.toStringTree(aqlParser));
    }

    public void pass1(){
        QueryCompilerPass1 queryCompilerPass1 = new QueryCompilerPass1();
        walker.walk(queryCompilerPass1, parseTree);

        this.identifierMapper = (IdentifierMapper) queryCompilerPass1.annotations.get(parseTree);
//        log.debug(identifierMapper.dump());
        nestedSets = queryCompilerPass1.getClosedSetList();

        //bind the nested sets to SQL (it should be an configuration btw)
        ContainBinder containBinder = new ContainBinder(nestedSets);
        this.containClause = containBinder.bind();

        FromDefinition definition = queryCompilerPass1.getFromStatements();
        FromBinder fromBinder = new FromBinder(context);
        this.fromClause = fromBinder.bind(containClause, definition);
    }

    public void pass2(){
        QueryCompilerPass2 queryCompilerPass2 = new QueryCompilerPass2();
        walker.walk(queryCompilerPass2, parseTree);
        variables = queryCompilerPass2.variables();
    }


    //for tests purpose
    public List<ContainmentSet> getNestedSets() {
        return nestedSets;
    }

    public String getContainClause() {
        return containClause;
    }

    public Select<?> getFromClause() {
        return fromClause;
    }

    public String getSelectClause() {
        return selectClause;
    }

    public String getWhereClause() {
        return whereClause;
    }

    public IdentifierMapper getIdentifierMapper(){
        return identifierMapper;
    }

    public List<VariableDefinition> getVariables() {
        return variables;
    }
}
