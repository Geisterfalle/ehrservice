/**
 * This class is generated by jOOQ
 */
package com.ethercis.aql.jooq.tables;


import com.ethercis.aql.jooq.Ehr;
import com.ethercis.aql.jooq.Keys;
import com.ethercis.aql.jooq.tables.records.AttestedViewRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AttestedView extends TableImpl<AttestedViewRecord> {

	private static final long serialVersionUID = 270621056;

	/**
	 * The reference instance of <code>ehr.attested_view</code>
	 */
	public static final AttestedView ATTESTED_VIEW = new AttestedView();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AttestedViewRecord> getRecordType() {
		return AttestedViewRecord.class;
	}

	/**
	 * The column <code>ehr.attested_view.id</code>.
	 */
	public final TableField<AttestedViewRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>ehr.attested_view.attestation_id</code>.
	 */
	public final TableField<AttestedViewRecord, UUID> ATTESTATION_ID = createField("attestation_id", org.jooq.impl.SQLDataType.UUID, this, "");

	/**
	 * The column <code>ehr.attested_view.alternate_text</code>.
	 */
	public final TableField<AttestedViewRecord, String> ALTERNATE_TEXT = createField("alternate_text", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>ehr.attested_view.compression_algorithm</code>.
	 */
	public final TableField<AttestedViewRecord, String> COMPRESSION_ALGORITHM = createField("compression_algorithm", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>ehr.attested_view.media_type</code>.
	 */
	public final TableField<AttestedViewRecord, String> MEDIA_TYPE = createField("media_type", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>ehr.attested_view.data</code>.
	 */
	public final TableField<AttestedViewRecord, byte[]> DATA = createField("data", org.jooq.impl.SQLDataType.BLOB, this, "");

	/**
	 * The column <code>ehr.attested_view.integrity_check</code>.
	 */
	public final TableField<AttestedViewRecord, byte[]> INTEGRITY_CHECK = createField("integrity_check", org.jooq.impl.SQLDataType.BLOB, this, "");

	/**
	 * The column <code>ehr.attested_view.integrity_check_algorithm</code>.
	 */
	public final TableField<AttestedViewRecord, String> INTEGRITY_CHECK_ALGORITHM = createField("integrity_check_algorithm", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>ehr.attested_view.thumbnail</code>.
	 */
	public final TableField<AttestedViewRecord, UUID> THUMBNAIL = createField("thumbnail", org.jooq.impl.SQLDataType.UUID, this, "");

	/**
	 * The column <code>ehr.attested_view.uri</code>.
	 */
	public final TableField<AttestedViewRecord, String> URI = createField("uri", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * Create a <code>ehr.attested_view</code> table reference
	 */
	public AttestedView() {
		this("attested_view", null);
	}

	/**
	 * Create an aliased <code>ehr.attested_view</code> table reference
	 */
	public AttestedView(String alias) {
		this(alias, ATTESTED_VIEW);
	}

	private AttestedView(String alias, Table<AttestedViewRecord> aliased) {
		this(alias, aliased, null);
	}

	private AttestedView(String alias, Table<AttestedViewRecord> aliased, Field<?>[] parameters) {
		super(alias, Ehr.EHR, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AttestedViewRecord> getPrimaryKey() {
		return Keys.ATTESTED_VIEW_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AttestedViewRecord>> getKeys() {
		return Arrays.<UniqueKey<AttestedViewRecord>>asList(Keys.ATTESTED_VIEW_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<AttestedViewRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<AttestedViewRecord, ?>>asList(Keys.ATTESTED_VIEW__ATTESTED_VIEW_ATTESTATION_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AttestedView as(String alias) {
		return new AttestedView(alias, this);
	}

	/**
	 * Rename this table
	 */
	public AttestedView rename(String name) {
		return new AttestedView(name, null);
	}
}
