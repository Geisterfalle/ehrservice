/*
 * Copyright (c) 2015 Christian Chevalley
 * This file is part of Project Ethercis
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ethercis.aql.sql.queryImpl;

import com.ethercis.aql.definition.VariableDefinition;
import com.ethercis.aql.sql.PathResolver;
import com.ethercis.dao.access.interfaces.I_DomainAccess;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.openehr.rm.support.identification.ObjectVersionID;

import java.util.List;
import java.util.UUID;

import static com.ethercis.aql.jooq.Tables.*;
import static com.ethercis.dao.jooq.Tables.COMPOSITION_HISTORY;

/**
 * Created by christian on 5/6/2016.
 */
public class CompositionAttributeQuery extends ObjectQuery implements I_QueryImpl {

    public CompositionAttributeQuery(I_DomainAccess domainAccess, PathResolver pathResolver, List<VariableDefinition> definitions){
        super(domainAccess, pathResolver, definitions);
    }

    @Override
    public Field<?> makeField(UUID compositionId, String identifier, VariableDefinition variableDefinition, boolean withAlias) {
        //resolve composition attributes and/or context
        switch (variableDefinition.getPath()){
            case "uid/value":
                return rawUid(compositionId, withAlias);
            case "name/value":
                return name(compositionId, withAlias);
            case "archetype_node_id":
                return archetypeNodeId(compositionId, withAlias);
            case "template_id":
                return templateId(compositionId, withAlias);
            case "language/value":
                return language(compositionId,withAlias);
            case "territory/value":
                return territory(compositionId, withAlias);
            case "composer/name/value":
                return composerNameValue(compositionId, withAlias);
            case "composer/id/namespace":
                return composerIdNamespace(compositionId, withAlias);
            case "composer/id/scheme":
                return composerIdScheme(compositionId, withAlias);
            case "composer/id/ref":
                return composerIdRef(compositionId, withAlias);
            case "composer/type":
                return composerType(compositionId, withAlias);
            case "context/start_time/value":
                return contextStartTime(compositionId, withAlias);
            case "context/end_time/value":
                return contextEndTime(compositionId, withAlias);
            case "context/location":
                return contextLocation(compositionId, withAlias);
            case "context/facility/name/value":
                return contextFacilityName(compositionId, withAlias);
            case "context/facility/id/namespace":
                return contextFacilityNamespace(compositionId, withAlias);
            case "context/facility/id/ref":
                return contextFacilityRef(compositionId, withAlias);
            case "context/facility/id/scheme":
                return contextFacilityScheme(compositionId, withAlias);
            case "context/facility/id/type":
                return contextFacilityType(compositionId, withAlias);


        }
        return null;
    }

    @Override
    public Field<?> whereField(UUID compositionId, String identifier, VariableDefinition variableDefinition) {
        return makeField(compositionId, identifier, variableDefinition, false);
    }

    private Field<?> uid(UUID compositionId, boolean alias){
        Integer versionCount = 1;
        if (domainAccess.getContext().fetchExists(COMPOSITION_HISTORY, COMPOSITION_HISTORY.ID.eq(compositionId)))
            versionCount = domainAccess.getContext().fetchCount(COMPOSITION_HISTORY, COMPOSITION_HISTORY.ID.eq(compositionId)) + 1;

        ObjectVersionID objectVersionID = new ObjectVersionID(compositionId.toString(), domainAccess.getServerNodeId(), "" + versionCount);

        if (alias) {
            Field<?> select = DSL.field("'" + objectVersionID.toString() + "'", String.class).as("uid");
            return select;
        }
        else
            return DSL.field("'" + objectVersionID.toString() + "'", String.class);
    }

    private Field<?> rawUid(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.COMPOSITION_ID).as("uid");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.COMPOSITION_ID);
    }

    private Field<?> name(UUID compositionId, boolean alias){
        //postgresql equivalent expression
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.COMPOSITION_NAME).as("composition_name");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.COMPOSITION_NAME);
    }

    private Field<?> archetypeNodeId(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.ARCHETYPE_ID).as("archetype_node_id");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.ARCHETYPE_ID);
    }

    private Field<?> templateId(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.TEMPLATE_ID).as("template_id");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.TEMPLATE_ID);
    }

    private Field<?> language(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.LANGUAGE).as("language");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.LANGUAGE);
    }

    private Field<?> territory(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.TERRITORY).as("territory");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.TERRITORY);
    }

    private Field<?> composerNameValue(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.COMPOSER_NAME).as("composer_name_value");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.COMPOSER_NAME);
    }

    private Field<?> composerIdNamespace(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.COMPOSER_NAMESPACE).as("composer_id_namespace");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.COMPOSER_NAMESPACE);
    }

    private Field<?> composerIdScheme(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.COMPOSER_SCHEME).as("composer_id_scheme");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.COMPOSER_SCHEME);
    }

    private Field<?> composerIdRef(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.COMPOSER_REF).as("composer_id_ref");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.COMPOSER_REF);
    }

    private Field<?> composerType(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.COMPOSER_TYPE).as("composer_type");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.COMPOSER_TYPE);
    }

    private Field<?> contextStartTime(UUID compositionId,boolean alias){
        if (alias) {
            Field<?> select = DSL.field("to_char(" + COMP_EXPAND.START_TIME + ",'YYYY-MM-DD\"T\"HH24:MI:SS')" + "||" + COMP_EXPAND.START_TIME_TZID).as("start_time");
            return select;
        }
        else
            return DSL.field("to_char(" + COMP_EXPAND.START_TIME + ",'YYYY-MM-DD\"T\"HH24:MI:SS')" + "||" + COMP_EXPAND.START_TIME_TZID);
    }

    private Field<?> contextEndTime(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field("to_char(" + COMP_EXPAND.END_TIME + ",'YYYY-MM-DD\"T\"HH24:MI:SS')" + "||" + COMP_EXPAND.END_TIME_TZID).as("end_time");
            return select;
        }
        else
            return DSL.field("to_char(" + COMP_EXPAND.END_TIME + ",'YYYY-MM-DD\"T\"HH24:MI:SS')" + "||" + COMP_EXPAND.END_TIME_TZID);
    }

    private Field<?> contextLocation(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.CTX_LOCATION).as("location");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.CTX_LOCATION);
    }

    private Field<?> contextFacilityName(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.FACILITY_NAME).as("facility_name");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.FACILITY_NAME);
    }

    private Field<?> contextFacilityRef(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.FACILITY_REF).as("facility_ref");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.FACILITY_REF);
    }

    private Field<?> contextFacilityScheme(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.FACILITY_SCHEME).as("facility_scheme");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.FACILITY_SCHEME);
    }

    private Field<?> contextFacilityNamespace(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.FACILITY_NAMESPACE).as("facility_namespace");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.FACILITY_NAMESPACE);
    }

    private Field<?> contextFacilityType(UUID compositionId, boolean alias){
        if (alias) {
            Field<?> select = DSL.field(COMP_EXPAND.FACILITY_TYPE).as("facility_type");
            return select;
        }
        else
            return DSL.field(COMP_EXPAND.FACILITY_TYPE);
    }

}
