/*
 * Copyright (c) 2015 Christian Chevalley
 * This file is part of Project Ethercis
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ethercis.aql;

import com.ethercis.aql.compiler.QueryParser;
import com.ethercis.aql.sql.QueryProcessor;
import com.ethercis.aql.sql.binding.SelectBinder;
import com.ethercis.dao.access.interfaces.I_DomainAccess;
import com.ethercis.dao.access.support.DummyDataAccess;
import org.jooq.DSLContext;
import org.jooq.Record;
import org.jooq.Result;
import org.junit.Before;
import org.junit.Test;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 * Created by christian on 4/1/2016.
 */
public class QueryParserTest {

    protected I_DomainAccess testDomainAccess;
    protected DSLContext context;

    @Before
    public void setUp(){

//        Logger.getRootLogger().setLevel(Level.DEBUG);

        Map<String, Object> properties = new HashMap<>();
        properties.put(I_DomainAccess.KEY_DIALECT, "POSTGRES");
        properties.put(I_DomainAccess.KEY_URL, "jdbc:postgresql://localhost:5434/ethercis");
        properties.put(I_DomainAccess.KEY_LOGIN, "postgres");
        properties.put(I_DomainAccess.KEY_PASSWORD, "postgres");

        try {
            testDomainAccess = new DummyDataAccess(properties);
        } catch (Exception e) {
            e.printStackTrace();
        }

        this.context = testDomainAccess.getContext();
    }

    @Test
    public void testDump() {

        String query = "SELECT o/data[at0002]/events[at0003] AS systolic\n" +
                "FROM EHR [ehr_id/value='1234'] \n" +
                "CONTAINS COMPOSITION c [openEHR-EHR-COMPOSITION.encounter.v1] \n" +
                "CONTAINS OBSERVATION o [openEHR-EHR-OBSERVATION.blood_pressure.v1]\n" +
                "WHERE o/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value/value > 140";

        QueryParser queryParser = new QueryParser(null, query);

        queryParser.dump();
    }

    @Test
    public void testWalk() throws SQLException {
        QueryProcessor queryProcessor = new QueryProcessor(context);

        String query = null;

//        query = "SELECT o/data[at0002]/events[at0003] AS systolic\n" +
//                "FROM EHR [ehr_id/value='1234'] \n" +
//                "CONTAINS COMPOSITION c [openEHR-EHR-COMPOSITION.encounter.v1] \n" +
//                "CONTAINS OBSERVATION o [openEHR-EHR-OBSERVATION.blood_pressure.v1]\n" +
//                "WHERE o/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value/value > 140";

//        query = "SELECT o/data[at0002]/events[at0003] AS systolic\n" +
//                "FROM EHR e CONTAINS ((COMPOSITION c1\n" +
//                "       CONTAINS ACTION a [openEHR-EHR-ACTION.medication.v1]\n" +
//                "           CONTAINS ITEM_TREE it [openEHR-EHR-ITEM_TREE.medication.v1]) AND\n" +
//                "       (COMPOSITION c2 CONTAINS EVALUATION eval [openEHR-EHR-EVALUATION.problem-diagnosis.v1]))\n" +
//                "WHERE o/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value/value > 140";

//        query = "SELECT o/data[at0002]/events[at0003] AS systolic\n" +
//                "FROM EHR [ehr_id/value='1234'] \n" +
//                "CONTAINS COMPOSITION c [openEHR-EHR-COMPOSITION.encounter.v1] \n" +
//                "CONTAINS (\n" +
//                "OBSERVATION o [openEHR-EHR-OBSERVATION.laboratory-hba1c.v1] \n" +
//                "AND OBSERVATION o1 [openEHR-EHR-OBSERVATION.laboratory-glucose.v1]\n" +
//                "OR OBSERVATION o2 [openEHR-EHR-OBSERVATION.laboratory-cellulose.v1]\n" +
//                "XOR OBSERVATION o3 [openEHR-EHR-OBSERVATION.laboratory-mixomatose.v1]\n" +
//                ")"+
//                "WHERE o/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value/value > 140";

//        query = "SELECT o/data[at0002]/events[at0003] AS systolic\n" +
//                "FROM EHR [ehr_id/value='1234'] \n" +
//                "CONTAINS COMPOSITION c [openEHR-EHR-COMPOSITION.encounter.v1] \n" +
//                "CONTAINS (\n" +
//                "OBSERVATION o [openEHR-EHR-OBSERVATION.laboratory-hba1c.v1] AND \n" +
//                "OBSERVATION o1 [openEHR-EHR-OBSERVATION.laboratory-glucose.v1]\n" +
//                "CONTAINS \n" +
//                "    (\n" +
//                "    ITEMTREE t1 [openEHR-EHR-ITEMTREE.tree-1.v0] OR\n" +
//                "    ITEMTREE t2 [openEHR-EHR-ITEMTREE.tree-2.v0]\n" +
//                "    CONTAINS (\n" +
//                "                CLUSTER cl1 [openEHR-EHR-CLUSTER.cluster-1.v0] \n" +
//                "                XOR\n" +
//                "                " +
//                "                   CLUSTER cl2 [openEHR-EHR-CLUSTER.cluster-2.v0]\n" +
//                "                       CONTAINS\n" +
//                "                           ITEM i1 [openEHR-EHR-ITEM.item-1.v0]\n" +
//                "                    " +
//                "             )\n" +
//                "    )\n" +
//                ")"+
//                "OR COMPOSITION c2 [openEHR-EHR-COMPOSITION.discharge.v1]\n" +
//                "WHERE o/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value/value > 140";

//        query = "SELECT o/data[at0002]/events[at0003] AS systolic\n" +
//                "FROM EHR [ehr_id/value='1234'] \n" +
//                "CONTAINS COMPOSITION c [openEHR-EHR-COMPOSITION.referral.v1]\n" +
//                "AND COMPOSITION c1 [openEHR-EHR-COMPOSITION.referral.v1]\n" +
//                "OR COMPOSITION c1 [openEHR-EHR-COMPOSITION.car-service.v1]\n" +
//                "XOR COMPOSITION c1 [openEHR-EHR-COMPOSITION.sink-plumbing.v1]\n" +
//                "WHERE o/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value/value > 140";

//        query = "SELECT o/data[at0002]/events[at0003] AS systolic\n" +
//                "FROM EHR [ehr_id/value='13085d82-b75b-4c6f-bf3d-72172b260741']  \n" +
//                "CONTAINS COMPOSITION c [openEHR-EHR-COMPOSITION.referral.v1]\n" +
//                "AND COMPOSITION c1 [openEHR-EHR-COMPOSITION.car-service.v1]\n" +
//                "WHERE o/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value/value > 140";

//        query = "SELECT o/data[at0002]/events[at0003] AS systolic,\n" +
//                "o/data[at0002]/events[at0005] AS diastolic\n"+
//                "FROM EHR e \n" +
//                "CONTAINS COMPOSITION c [openEHR-EHR-COMPOSITION.encounter.v1] \n" +
//                "CONTAINS OBSERVATION o [openEHR-EHR-OBSERVATION.blood_pressure.v1]\n" +
//                "WHERE o/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value/value > 140";

//        query = "SELECT o/data[at0002]/events[at0003] AS systolic\n" +
//                "FROM EHR e \n" +
//                "CONTAINS COMPOSITION c \n" +
//                "CONTAINS (EVALUATION e1 [openEHR-EHR-EVALUATION.problem-diagnosis.v1] \n" +
//                " OR \n" +
//                "CLUSTER cl [openEHR-EHR-CLUSTER.laboratory-test-panel.v0]) \n" +
//                "WHERE o/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value/value > 140";

        query = "SELECT eval/data[at0002]/events[at0003] AS systolic\n" +
                "FROM EHR e  \n" +
                "CONTAINS COMPOSITION c \n" +
                "CONTAINS EVALUATION eval [openEHR-EHR-EVALUATION.problem-diagnosis.v1] \n" +
                "WHERE o/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value/value > 140";


        //this one should raise an exception with a syntax error
//        query = "SELECT o/data[at0002]/events[at0003] AS systolic\n" +
//                "FROM EHR [ehr_id/value='1234'] \n" +
//                "CONTAINS COMPOSITION c [[openEHR-EHR-COMPOSITION.referral.v1]\n" +
//                "AND COMPOSITION c1 [openEHR-EHR-COMPOSITION.referral.v1]\n" +
//                "OR COMPOSITION c1 [openEHR-EHR-COMPOSITION.car-service.v1]\n" +
//                "XOR COMPOSITION c1 [openEHR-EHR-COMPOSITION.sink-plumbing.v1]\n" +
//                "WHERE o/data[at0001]/events[at0006]/data[at0003]/items[at0004]/value/value > 140";

//        query = "selectBinder a/uid/value\n" +
//                "from EHR e [ehr_id/value = 'bb872277-40c4-44fb-8691-530be31e1ee9']\n" +
//                "contains COMPOSITION a[openEHR-EHR-COMPOSITION.encounter.v1]\n" +
//                "where a/name/value='PatientSky HealthCheck'";

        QueryParser queryParser = new QueryParser(context, query);

        queryParser.pass1();
        queryParser.pass2();

        Result<?> records = queryProcessor.performFrom(queryParser.getFromClause());

        SelectBinder selectBinder = new SelectBinder(context, queryParser.getIdentifierMapper(), queryParser.getVariables());

        for (Record record: records){
            UUID comp_id = (UUID)record.getValue("comp_id");
            selectBinder.bind(comp_id);
        }

//        List<ContainmentSet> containmentSets = queryParser.getNestedSets();
//
//        //dump the list
//        for (ContainmentSet containmentSet: containmentSets){
//            System.out.println(containmentSet);
//        }
    }

}