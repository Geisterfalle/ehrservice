/**
 * This class is generated by jOOQ
 */
package com.ethercis.aql.jooq.tables;


import com.ethercis.aql.jooq.Ehr;
import com.ethercis.aql.jooq.Keys;
import com.ethercis.aql.jooq.tables.records.CompositionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Composition table
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Composition extends TableImpl<CompositionRecord> {

	private static final long serialVersionUID = 1692043564;

	/**
	 * The reference instance of <code>ehr.composition</code>
	 */
	public static final Composition COMPOSITION = new Composition();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<CompositionRecord> getRecordType() {
		return CompositionRecord.class;
	}

	/**
	 * The column <code>ehr.composition.id</code>.
	 */
	public final TableField<CompositionRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>ehr.composition.ehr_id</code>.
	 */
	public final TableField<CompositionRecord, UUID> EHR_ID = createField("ehr_id", org.jooq.impl.SQLDataType.UUID, this, "");

	/**
	 * The column <code>ehr.composition.in_contribution</code>.
	 */
	public final TableField<CompositionRecord, UUID> IN_CONTRIBUTION = createField("in_contribution", org.jooq.impl.SQLDataType.UUID, this, "");

	/**
	 * The column <code>ehr.composition.active</code>.
	 */
	public final TableField<CompositionRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN.defaulted(true), this, "");

	/**
	 * The column <code>ehr.composition.is_persistent</code>.
	 */
	public final TableField<CompositionRecord, Boolean> IS_PERSISTENT = createField("is_persistent", org.jooq.impl.SQLDataType.BOOLEAN.defaulted(true), this, "");

	/**
	 * The column <code>ehr.composition.language</code>.
	 */
	public final TableField<CompositionRecord, String> LANGUAGE = createField("language", org.jooq.impl.SQLDataType.VARCHAR.length(5), this, "");

	/**
	 * The column <code>ehr.composition.territory</code>.
	 */
	public final TableField<CompositionRecord, Integer> TERRITORY = createField("territory", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>ehr.composition.composer</code>.
	 */
	public final TableField<CompositionRecord, UUID> COMPOSER = createField("composer", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>ehr.composition.sys_transaction</code>.
	 */
	public final TableField<CompositionRecord, Timestamp> SYS_TRANSACTION = createField("sys_transaction", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>ehr.composition.sys_period</code>.
	 */
	public final TableField<CompositionRecord, Object> SYS_PERIOD = createField("sys_period", org.jooq.impl.DefaultDataType.getDefaultDataType("tstzrange"), this, "");

	/**
	 * Create a <code>ehr.composition</code> table reference
	 */
	public Composition() {
		this("composition", null);
	}

	/**
	 * Create an aliased <code>ehr.composition</code> table reference
	 */
	public Composition(String alias) {
		this(alias, COMPOSITION);
	}

	private Composition(String alias, Table<CompositionRecord> aliased) {
		this(alias, aliased, null);
	}

	private Composition(String alias, Table<CompositionRecord> aliased, Field<?>[] parameters) {
		super(alias, Ehr.EHR, aliased, parameters, "Composition table");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<CompositionRecord> getPrimaryKey() {
		return Keys.COMPOSITION_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<CompositionRecord>> getKeys() {
		return Arrays.<UniqueKey<CompositionRecord>>asList(Keys.COMPOSITION_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<CompositionRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<CompositionRecord, ?>>asList(Keys.COMPOSITION__COMPOSITION_EHR_ID_FKEY, Keys.COMPOSITION__COMPOSITION_IN_CONTRIBUTION_FKEY, Keys.COMPOSITION__COMPOSITION_LANGUAGE_FKEY, Keys.COMPOSITION__COMPOSITION_TERRITORY_FKEY, Keys.COMPOSITION__COMPOSITION_COMPOSER_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Composition as(String alias) {
		return new Composition(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Composition rename(String name) {
		return new Composition(name, null);
	}
}
