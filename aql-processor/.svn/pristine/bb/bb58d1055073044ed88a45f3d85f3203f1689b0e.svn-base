/*
 * Copyright (c) 2015 Christian Chevalley
 * This file is part of Project Ethercis
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ethercis.aql.compiler;

import com.ethercis.aql.parser.AqlBaseListener;
import com.ethercis.aql.parser.AqlParser;
import com.ethercis.aql.definition.VariableDefinition;
import org.antlr.v4.runtime.tree.ParseTreeProperty;
import org.apache.log4j.Logger;

import java.util.*;

/**
 * Created by christian on 4/1/2016.
 */
public class QueryCompilerPass2 extends AqlBaseListener {

    Logger logger = Logger.getLogger(QueryCompilerPass2.class);

    private static int serial = 0;

    ParseTreeProperty<Object> annotations = new ParseTreeProperty<>();

    VariableDefinition currentVariable = null;

    Deque<VariableDefinition> variableStack = new ArrayDeque<>();

    @Override
    public void exitObjectPath(AqlParser.ObjectPathContext objectPathContext){
        logger.debug("Object Path->");
    }

    @Override
    public void exitIdentifiedPath(AqlParser.IdentifiedPathContext identifiedPathContext){
        logger.debug("Identified Path->");
        String path = identifiedPathContext.objectPath().getText();
        String identifier = identifiedPathContext.IDENTIFIER().getText();
    }

    @Override
    public void exitIdentifiedPathSeq(AqlParser.IdentifiedPathSeqContext identifiedPathSeqContext){
        logger.debug("IdentifiedPathSeq->");
        AqlParser.IdentifiedPathContext identifiedPathContext = identifiedPathSeqContext.identifiedPath();
        String path = identifiedPathContext.objectPath().getText();
        String identifier = identifiedPathContext.IDENTIFIER().getText();
        String alias = null;
        if (identifiedPathSeqContext.IDENTIFIER() != null)
            alias = identifiedPathSeqContext.IDENTIFIER().getText();
        VariableDefinition variableDefinition = new VariableDefinition(path, alias, identifier);
        variableStack.push(variableDefinition);
    }

    public List<VariableDefinition> variables(){
        return new ArrayList<>(variableStack);
    }


}
