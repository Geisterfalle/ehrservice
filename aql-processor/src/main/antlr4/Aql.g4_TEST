//Modified version from:
// Author: Bostjan Lah
// (c) Copyright, Marand, http://www.marand.com
// Licensed under LGPL: http://www.gnu.org/copyleft/lesser.html
// Based on AQL grammar by Ocean Informatics: http://www.openehr.org/wiki/download/attachments/2949295/EQL_v0.6.grm?version=1&modificationDate=1259650833000
//
// Author: Christian Chevalley - July 2016:
// modified to support ANTLR4
// removed dependencies on specific packages
//-------------------------------------------

grammar Aql;

query	:	queryExpr ;

queryExpr : select from (where)? (orderBy)? EOF;

select
        : SELECT selectExpr
        | SELECT topExpr selectExpr ;

topExpr
        : TOP INTEGER
        | TOP INTEGER BACKWARD
        | TOP INTEGER FORWARD ;

where
        : WHERE identifiedExpr ;

orderBy 
        : ORDERBY orderBySeq ;

orderBySeq  
        : orderByExpr
		| orderByExpr COMMA orderBySeq ;

orderByExpr 
        : identifiedPath
		| identifiedPath DESCENDING
		| identifiedPath ASCENDING
		| identifiedPath DESC
		| identifiedPath ASC ;

selectExpr 
        : identifiedPathSeq;

//! When multiple paths provided, each identifiedPath must represent an object of type DataValue
identifiedPathSeq 
            : identifiedPath
			| identifiedPath AS IDENTIFIER
			| identifiedPath COMMA identifiedPathSeq
			| identifiedPath AS IDENTIFIER COMMA identifiedPathSeq ;

from
        : FROM fromExpr		// stop or/and without root class
	    | FROM fromEHR (CONTAINS containsExpression)?;
//        | FROM ContainsOr;

fromEHR 
        : EHR standardPredicate
        | EHR IDENTIFIER standardPredicate
        | EHR IDENTIFIER ;

fromExpr
        : containsExpression;

//====== CONTAINMENT
containsExpression
        : containExpressionBool (BooleanOperator containsExpression)?;

containExpressionBool
        : contains
        | OPEN_PARENTHESIS containsExpression CLOSE_PARENTHESIS;

contains
        : simpleClassExpr (CONTAINS containsExpression)?;


//======= END CONTAINMENT
//TODO: use Lexer definition instead of String literal

identifiedExpr
        : identifiedOperand
        | identifiedOperand COMPARABLEOPERATOR identifiedOperand
        | identifiedOperand OR identifiedOperand
        | identifiedOperand XOR identifiedOperand
        | identifiedOperand AND identifiedOperand;

//identifiedExpr
// 	    : identifiedExprAnd ((OR|XOR) identifiedExprAnd)*;
//
//identifiedExprAnd
//	    : identifiedEquality (AND identifiedExpr)*;


//identifiedEquality
//        : identifiedOperand
//        | identifiedOperand COMPARABLEOPERATOR identifiedOperand
//	    | identifiedOperand MATCHES OPEN_CURLY matchesOperand CLOSE_CURLY
//        | identifiedOperand MATCHES REGEXPATTERN
//        | NOT identifiedEquality
//        | NOT IN OPEN_PARENTHESIS queryExpr CLOSE_PARENTHESIS
//        | EXISTS identifiedPath ;

identifiedOperand 
        : operand 
        | identifiedPath ;

identifiedPath 
        : IDENTIFIER
        | IDENTIFIER predicate
        | IDENTIFIER SLASH objectPath
        | IDENTIFIER predicate SLASH objectPath ;


predicate 
        : nodePredicate;

nodePredicate
        : OPEN_BRACKET nodePredicateOr CLOSE_BRACKET;

nodePredicateOr
        : nodePredicateAnd
        | nodePredicateOr OR nodePredicateAnd ;

nodePredicateAnd
        : nodePredicateComparable
        | nodePredicateAnd AND nodePredicateComparable ;

nodePredicateComparable
        : predicateOperand COMPARABLEOPERATOR predicateOperand
        | NODEID
        | NODEID COMMA STRING        // <NodeId> and name/value = <String> shortcut
        | NODEID COMMA PARAMETER     // <NodeId> and name/value = <Parameter> shortcut
        | nodePredicateRegEx     // /items[{/at0001.*/}], /items[at0001 and name/value matches {//}]
        | ARCHETYPEID
        | ARCHETYPEID COMMA STRING        // <NodeId> and name/value = <String> shortcut
        | ARCHETYPEID COMMA PARAMETER ;   // <NodeId> and name/value = <Parameter> shortcut

nodePredicateRegEx
        : REGEXPATTERN
        | predicateOperand MATCHES REGEXPATTERN ;


matchesOperand
        : valueListItems
        | URIVALUE ;

valueListItems
        : operand
        | operand COMMA valueListItems ;

versionpredicate
 	    : OPEN_BRACKET versionpredicateOptions CLOSE_BRACKET;

versionpredicateOptions
        : LATEST_VERSION
        | ALL_VERSIONS;

standardPredicate
        : OPEN_BRACKET predicateExpr CLOSE_BRACKET;

predicateExpr
        : predicateOr;

predicateOr
        : predicateAnd (OR predicateAnd)*;

predicateAnd
        : predicateEquality (AND predicateEquality)*;

predicateEquality
        : predicateOperand COMPARABLEOPERATOR predicateOperand;

predicateOperand
        : objectPath | operand;

operand
        : STRING
        | INTEGER
        | FLOAT
        | DATE
        | PARAMETER
        | BOOLEAN;


objectPath
        : pathPart (SLASH pathPart)*;


pathPart
        : IDENTIFIER predicate?;


BooleanOperator: (AND|OR|XOR);

classExpr
 	    : OPEN_PARENTHESIS simpleClassExpr CLOSE_PARENTHESIS
	    | simpleClassExpr
	    ;

simpleClassExpr
	    : IDENTIFIER IDENTIFIER?					//! RM_TYPE_NAME .. RM_TYPE_NAME identifier
        | archetypedClassExpr
        | versionedClassExpr
	    | versionClassExpr;

archetypedClassExpr
 	    : IDENTIFIER (IDENTIFIER)? (archetypePredicateExpr)?;	//! RM_TYPE_NAME identifier? [archetype_id]

versionedClassExpr
 	    : VERSIONED_OBJECT (IDENTIFIER)? (standardPredicate)?;

versionClassExpr
 	    : VERSION (IDENTIFIER)? (standardPredicate|versionpredicate)?;


archetypePredicateExpr
        : '[' ARCHETYPEID ']'
        | '[' PARAMETER ']'
        | '[' REGEXPATTERN ']' ;

//
// LEXER PATTERNS
//

WS  :   ( ' '
        | '\t'
        | '\r'
        | '\n'
        ) -> skip
    ;

NODEID	:	'at' DIGIT+ ('.' DIGIT+)*; // DIGIT DIGIT DIGIT DIGIT;

IDENTIFIER
	:	A (ALPHANUM|'_')*
	| 	LETTERMINUSA IDCHAR*
	;


SELECT : S E L E C T ;
TOP : T O P ;
FORWARD : F O R W A R D ;
BACKWARD : B A C K W A R D ;
AS : A S ;
CONTAINS : C O N T A I N S ;
WHERE : W H E R E ;
ORDERBY : O R D E R B Y;
FROM : F R O M ;
DESCENDING : D E S C E N D I N G ;
ASCENDING : A S C E N D I N G ;
DESC : D E S C ;
ASC : A S C ;
//EHR : 'EHR';
EHR : E H R ;
MATCHES : M A T C H E S ;
EXISTS: E X I S T S ;
VERSION	:	V E R S I O N ;
VERSIONED_OBJECT	:	V E R S I N O E D '_' O B J E C T;
ALL_VERSIONS:	A L L '_' V E R S I O N S ;
LATEST_VERSION: L A T E S T '_' V E R S I O N ;

AND : A N D ;
OR : O R ;
XOR : X O R ;
NOT : N O T ;
IN : I N ;

// Terminal Definitions

//Boolean     = 'true' | 'false'
BOOLEAN	:	(T R U E) | (F A L S E) ;

INTEGER	:	'-'? DIGIT+;

FLOAT	:	'-'? DIGIT+ '.' DIGIT+;

DATE	:	'\'' DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT 'T' DIGIT DIGIT DIGIT DIGIT DIGIT DIGIT '.' DIGIT DIGIT DIGIT '+' DIGIT DIGIT DIGIT DIGIT '\'';

PARAMETER :	'$' LETTER IDCHAR*;

UNIQUEID:	DIGIT+ ('.' DIGIT+)+ '.' DIGIT+  // OID
            | HEXCHAR+ ('-' HEXCHAR+)+       // UUID
	;

ARCHETYPEID
	:	LETTER+ '-' LETTER+ '-' (LETTER|'_')+ '.' (IDCHAR|'-')+ '.v' DIGIT+ ('.' DIGIT+)?
	;

COMPARABLEOPERATOR
	:	'=' | '!=' | '>' | '>=' | '<' | '<='
	;

URIVALUE: LETTER+ '://' (URISTRING|'['|']'|', \''|'\'')*
//	| LETTER+ ':' (URISTRING|'['|']'|'\'')*
        ;

REGEXPATTERN
	:	'{/' REGEXCHAR+ '/}';

STRING
    	:  '\'' ( ESC_SEQ | ~('\\'|'\'') )* '\''
    	|  '"' ( ESC_SEQ | ~('\\'|'"') )* '"'
    	;

SLASH	:	'/';

COMMA	:	',';

SEMICOLON : ';';

OPEN_BRACKET :	'[';
CLOSE_BRACKET :	']';

OPEN_PARENTHESIS	:	'(';
CLOSE_PARENTHESIS	:	')';

OPEN_CURLY :	'{';
CLOSE_CURLY :	'}';
	
ESC_SEQ
    :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
    |   UNICODE_ESC
    |   OCTAL_ESC
    ;

OCTAL_ESC
    :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7')
    ;

UNICODE_ESC
    :   '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    ;

QUOTE	:	'\'';

HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ;

HEXCHAR	:	 DIGIT|A|B|C|D|E|F;

LETTER :	'a'..'z'|'A'..'Z';

ALPHANUM: LETTER|DIGIT;

LETTERMINUSA
	:	'b'..'z'|'B'..'Z';

LETTERMINUST
	:	'a'..'s'|'A'..'S'|'u'..'z'|'U'..'Z';

IDCHAR	:	ALPHANUM|'_';

IDCHARMINUST
	:	LETTERMINUST|DIGIT|'_';

URISTRING
	:	ALPHANUM|'_'|'-'|'/'|':'|'.'|'?'|'&'|'%'|'$'|'#'|'@'|'!'|'+'|'='|'*';

fragment REGEXCHAR :	URISTRING|'('|')'|'\\'|'^'|'{'|'}'|']'|'[';

fragment DIGIT : [0-9];

fragment A : [aA];
fragment B : [bB];
fragment C : [cC];
fragment D : [dD];
fragment E : [eE];
fragment F : [fF];
fragment G : [gG];
fragment H : [hH];
fragment I : [iI];
fragment J : [jJ];
fragment K : [kK];
fragment L : [lL];
fragment M : [mM];
fragment N : [nN];
fragment O : [oO];
fragment P : [pP];
fragment Q : [qQ];
fragment R : [rR];
fragment S : [sS];
fragment T : [tT];
fragment U : [uU];
fragment V : [vV];
fragment W : [wW];
fragment X : [xX];
fragment Y : [yY];
fragment Z : [zZ];
