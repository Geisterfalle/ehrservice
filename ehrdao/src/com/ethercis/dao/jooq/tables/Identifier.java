/**
 * This class is generated by jOOQ
 */
package com.ethercis.dao.jooq.tables;

/**
 * specifies an identifier for a party identified, more than one identifier 
 * is possible
 */
@javax.annotation.Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.5.3"
	},
	comments = "This class is generated by jOOQ"
)
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Identifier extends org.jooq.impl.TableImpl<com.ethercis.dao.jooq.tables.records.IdentifierRecord> {

	private static final long serialVersionUID = -785173330;

	/**
	 * The reference instance of <code>ehr.identifier</code>
	 */
	public static final com.ethercis.dao.jooq.tables.Identifier IDENTIFIER = new com.ethercis.dao.jooq.tables.Identifier();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<com.ethercis.dao.jooq.tables.records.IdentifierRecord> getRecordType() {
		return com.ethercis.dao.jooq.tables.records.IdentifierRecord.class;
	}

	/**
	 * The column <code>ehr.identifier.id_value</code>.
	 */
	public final org.jooq.TableField<com.ethercis.dao.jooq.tables.records.IdentifierRecord, java.lang.String> ID_VALUE = createField("id_value", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>ehr.identifier.issuer</code>.
	 */
	public final org.jooq.TableField<com.ethercis.dao.jooq.tables.records.IdentifierRecord, java.lang.String> ISSUER = createField("issuer", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>ehr.identifier.assigner</code>.
	 */
	public final org.jooq.TableField<com.ethercis.dao.jooq.tables.records.IdentifierRecord, java.lang.String> ASSIGNER = createField("assigner", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>ehr.identifier.type_name</code>.
	 */
	public final org.jooq.TableField<com.ethercis.dao.jooq.tables.records.IdentifierRecord, java.lang.String> TYPE_NAME = createField("type_name", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>ehr.identifier.party</code>.
	 */
	public final org.jooq.TableField<com.ethercis.dao.jooq.tables.records.IdentifierRecord, java.util.UUID> PARTY = createField("party", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * Create a <code>ehr.identifier</code> table reference
	 */
	public Identifier() {
		this("identifier", null);
	}

	/**
	 * Create an aliased <code>ehr.identifier</code> table reference
	 */
	public Identifier(java.lang.String alias) {
		this(alias, com.ethercis.dao.jooq.tables.Identifier.IDENTIFIER);
	}

	private Identifier(java.lang.String alias, org.jooq.Table<com.ethercis.dao.jooq.tables.records.IdentifierRecord> aliased) {
		this(alias, aliased, null);
	}

	private Identifier(java.lang.String alias, org.jooq.Table<com.ethercis.dao.jooq.tables.records.IdentifierRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, com.ethercis.dao.jooq.Ehr.EHR, aliased, parameters, "specifies an identifier for a party identified, more than one identifier is possible");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.ForeignKey<com.ethercis.dao.jooq.tables.records.IdentifierRecord, ?>> getReferences() {
		return java.util.Arrays.<org.jooq.ForeignKey<com.ethercis.dao.jooq.tables.records.IdentifierRecord, ?>>asList(com.ethercis.dao.jooq.Keys.IDENTIFIER__IDENTIFIER_PARTY_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public com.ethercis.dao.jooq.tables.Identifier as(java.lang.String alias) {
		return new com.ethercis.dao.jooq.tables.Identifier(alias, this);
	}

	/**
	 * Rename this table
	 */
	public com.ethercis.dao.jooq.tables.Identifier rename(java.lang.String name) {
		return new com.ethercis.dao.jooq.tables.Identifier(name, null);
	}
}
