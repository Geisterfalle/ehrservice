/**
 * This class is generated by jOOQ
 */
package com.ethercis.jooq.pg.tables;


import com.ethercis.jooq.pg.Ehr;
import com.ethercis.jooq.pg.tables.records.ContainmentRecord;

import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Containment extends TableImpl<ContainmentRecord> {

	private static final long serialVersionUID = -1330869970;

	/**
	 * The reference instance of <code>ehr.containment</code>
	 */
	public static final Containment CONTAINMENT = new Containment();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ContainmentRecord> getRecordType() {
		return ContainmentRecord.class;
	}

	/**
	 * The column <code>ehr.containment.comp_id</code>.
	 */
	public final TableField<ContainmentRecord, UUID> COMP_ID = createField("comp_id", org.jooq.impl.SQLDataType.UUID, this, "");

	/**
	 * The column <code>ehr.containment.label</code>.
	 */
	public final TableField<ContainmentRecord, Object> LABEL = createField("label", org.jooq.impl.DefaultDataType.getDefaultDataType("USER-DEFINED"), this, "");

	/**
	 * The column <code>ehr.containment.path</code>.
	 */
	public final TableField<ContainmentRecord, String> PATH = createField("path", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * Create a <code>ehr.containment</code> table reference
	 */
	public Containment() {
		this("containment", null);
	}

	/**
	 * Create an aliased <code>ehr.containment</code> table reference
	 */
	public Containment(String alias) {
		this(alias, CONTAINMENT);
	}

	private Containment(String alias, Table<ContainmentRecord> aliased) {
		this(alias, aliased, null);
	}

	private Containment(String alias, Table<ContainmentRecord> aliased, Field<?>[] parameters) {
		super(alias, Ehr.EHR, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Containment as(String alias) {
		return new Containment(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Containment rename(String name) {
		return new Containment(name, null);
	}
}
