/**
 * This class is generated by jOOQ
 */
package com.ethercis.jooq.pg.tables;


import com.ethercis.jooq.pg.Ehr;
import com.ethercis.jooq.pg.Keys;
import com.ethercis.jooq.pg.tables.records.TerminologyProviderRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * openEHR identified terminology provider
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TerminologyProvider extends TableImpl<TerminologyProviderRecord> {

	private static final long serialVersionUID = 103503217;

	/**
	 * The reference instance of <code>ehr.terminology_provider</code>
	 */
	public static final TerminologyProvider TERMINOLOGY_PROVIDER = new TerminologyProvider();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TerminologyProviderRecord> getRecordType() {
		return TerminologyProviderRecord.class;
	}

	/**
	 * The column <code>ehr.terminology_provider.code</code>.
	 */
	public final TableField<TerminologyProviderRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "");

	/**
	 * The column <code>ehr.terminology_provider.source</code>.
	 */
	public final TableField<TerminologyProviderRecord, String> SOURCE = createField("source", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>ehr.terminology_provider.authority</code>.
	 */
	public final TableField<TerminologyProviderRecord, String> AUTHORITY = createField("authority", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * Create a <code>ehr.terminology_provider</code> table reference
	 */
	public TerminologyProvider() {
		this("terminology_provider", null);
	}

	/**
	 * Create an aliased <code>ehr.terminology_provider</code> table reference
	 */
	public TerminologyProvider(String alias) {
		this(alias, TERMINOLOGY_PROVIDER);
	}

	private TerminologyProvider(String alias, Table<TerminologyProviderRecord> aliased) {
		this(alias, aliased, null);
	}

	private TerminologyProvider(String alias, Table<TerminologyProviderRecord> aliased, Field<?>[] parameters) {
		super(alias, Ehr.EHR, aliased, parameters, "openEHR identified terminology provider");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TerminologyProviderRecord> getPrimaryKey() {
		return Keys.TERMINOLOGY_PROVIDER_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TerminologyProviderRecord>> getKeys() {
		return Arrays.<UniqueKey<TerminologyProviderRecord>>asList(Keys.TERMINOLOGY_PROVIDER_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TerminologyProvider as(String alias) {
		return new TerminologyProvider(alias, this);
	}

	/**
	 * Rename this table
	 */
	public TerminologyProvider rename(String name) {
		return new TerminologyProvider(name, null);
	}
}
