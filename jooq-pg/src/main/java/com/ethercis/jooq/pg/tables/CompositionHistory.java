/**
 * This class is generated by jOOQ
 */
package com.ethercis.jooq.pg.tables;


import com.ethercis.jooq.pg.Ehr;
import com.ethercis.jooq.pg.tables.records.CompositionHistoryRecord;

import java.sql.Timestamp;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompositionHistory extends TableImpl<CompositionHistoryRecord> {

	private static final long serialVersionUID = 280074477;

	/**
	 * The reference instance of <code>ehr.composition_history</code>
	 */
	public static final CompositionHistory COMPOSITION_HISTORY = new CompositionHistory();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<CompositionHistoryRecord> getRecordType() {
		return CompositionHistoryRecord.class;
	}

	/**
	 * The column <code>ehr.composition_history.id</code>.
	 */
	public final TableField<CompositionHistoryRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>ehr.composition_history.ehr_id</code>.
	 */
	public final TableField<CompositionHistoryRecord, UUID> EHR_ID = createField("ehr_id", org.jooq.impl.SQLDataType.UUID, this, "");

	/**
	 * The column <code>ehr.composition_history.in_contribution</code>.
	 */
	public final TableField<CompositionHistoryRecord, UUID> IN_CONTRIBUTION = createField("in_contribution", org.jooq.impl.SQLDataType.UUID, this, "");

	/**
	 * The column <code>ehr.composition_history.active</code>.
	 */
	public final TableField<CompositionHistoryRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

	/**
	 * The column <code>ehr.composition_history.is_persistent</code>.
	 */
	public final TableField<CompositionHistoryRecord, Boolean> IS_PERSISTENT = createField("is_persistent", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

	/**
	 * The column <code>ehr.composition_history.language</code>.
	 */
	public final TableField<CompositionHistoryRecord, String> LANGUAGE = createField("language", org.jooq.impl.SQLDataType.VARCHAR.length(5), this, "");

	/**
	 * The column <code>ehr.composition_history.territory</code>.
	 */
	public final TableField<CompositionHistoryRecord, Integer> TERRITORY = createField("territory", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>ehr.composition_history.composer</code>.
	 */
	public final TableField<CompositionHistoryRecord, UUID> COMPOSER = createField("composer", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>ehr.composition_history.sys_transaction</code>.
	 */
	public final TableField<CompositionHistoryRecord, Timestamp> SYS_TRANSACTION = createField("sys_transaction", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>ehr.composition_history.sys_period</code>.
	 */
	public final TableField<CompositionHistoryRecord, Object> SYS_PERIOD = createField("sys_period", org.jooq.impl.DefaultDataType.getDefaultDataType("tstzrange"), this, "");

	/**
	 * Create a <code>ehr.composition_history</code> table reference
	 */
	public CompositionHistory() {
		this("composition_history", null);
	}

	/**
	 * Create an aliased <code>ehr.composition_history</code> table reference
	 */
	public CompositionHistory(String alias) {
		this(alias, COMPOSITION_HISTORY);
	}

	private CompositionHistory(String alias, Table<CompositionHistoryRecord> aliased) {
		this(alias, aliased, null);
	}

	private CompositionHistory(String alias, Table<CompositionHistoryRecord> aliased, Field<?>[] parameters) {
		super(alias, Ehr.EHR, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CompositionHistory as(String alias) {
		return new CompositionHistory(alias, this);
	}

	/**
	 * Rename this table
	 */
	public CompositionHistory rename(String name) {
		return new CompositionHistory(name, null);
	}
}
