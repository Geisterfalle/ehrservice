/**
 * This class is generated by jOOQ
 */
package com.ethercis.jooq.pg.tables;


import com.ethercis.jooq.pg.Ehr;
import com.ethercis.jooq.pg.Keys;
import com.ethercis.jooq.pg.tables.records.IdentifierRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * specifies an identifier for a party identified, more than one identifier 
 * is possible
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Identifier extends TableImpl<IdentifierRecord> {

	private static final long serialVersionUID = 915382071;

	/**
	 * The reference instance of <code>ehr.identifier</code>
	 */
	public static final Identifier IDENTIFIER = new Identifier();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<IdentifierRecord> getRecordType() {
		return IdentifierRecord.class;
	}

	/**
	 * The column <code>ehr.identifier.id_value</code>.
	 */
	public final TableField<IdentifierRecord, String> ID_VALUE = createField("id_value", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>ehr.identifier.issuer</code>.
	 */
	public final TableField<IdentifierRecord, String> ISSUER = createField("issuer", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>ehr.identifier.assigner</code>.
	 */
	public final TableField<IdentifierRecord, String> ASSIGNER = createField("assigner", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>ehr.identifier.type_name</code>.
	 */
	public final TableField<IdentifierRecord, String> TYPE_NAME = createField("type_name", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>ehr.identifier.party</code>.
	 */
	public final TableField<IdentifierRecord, UUID> PARTY = createField("party", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * Create a <code>ehr.identifier</code> table reference
	 */
	public Identifier() {
		this("identifier", null);
	}

	/**
	 * Create an aliased <code>ehr.identifier</code> table reference
	 */
	public Identifier(String alias) {
		this(alias, IDENTIFIER);
	}

	private Identifier(String alias, Table<IdentifierRecord> aliased) {
		this(alias, aliased, null);
	}

	private Identifier(String alias, Table<IdentifierRecord> aliased, Field<?>[] parameters) {
		super(alias, Ehr.EHR, aliased, parameters, "specifies an identifier for a party identified, more than one identifier is possible");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<IdentifierRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<IdentifierRecord, ?>>asList(Keys.IDENTIFIER__IDENTIFIER_PARTY_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identifier as(String alias) {
		return new Identifier(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Identifier rename(String name) {
		return new Identifier(name, null);
	}
}
