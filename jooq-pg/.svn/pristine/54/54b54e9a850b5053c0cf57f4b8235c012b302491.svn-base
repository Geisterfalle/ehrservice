/**
 * This class is generated by jOOQ
 */
package com.ethercis.jooq.pg.tables;


import com.ethercis.jooq.pg.Ehr;
import com.ethercis.jooq.pg.Keys;
import com.ethercis.jooq.pg.tables.records.ParticipationRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * define a participating party for an event f.ex.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Participation extends TableImpl<ParticipationRecord> {

	private static final long serialVersionUID = 434431934;

	/**
	 * The reference instance of <code>ehr.participation</code>
	 */
	public static final Participation PARTICIPATION = new Participation();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ParticipationRecord> getRecordType() {
		return ParticipationRecord.class;
	}

	/**
	 * The column <code>ehr.participation.id</code>.
	 */
	public final TableField<ParticipationRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>ehr.participation.event_context</code>.
	 */
	public final TableField<ParticipationRecord, UUID> EVENT_CONTEXT = createField("event_context", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

	/**
	 * The column <code>ehr.participation.performer</code>.
	 */
	public final TableField<ParticipationRecord, UUID> PERFORMER = createField("performer", org.jooq.impl.SQLDataType.UUID, this, "");

	/**
	 * The column <code>ehr.participation.function</code>.
	 */
	public final TableField<ParticipationRecord, String> FUNCTION = createField("function", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>ehr.participation.mode</code>.
	 */
	public final TableField<ParticipationRecord, String> MODE = createField("mode", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>ehr.participation.start_time</code>.
	 */
	public final TableField<ParticipationRecord, Timestamp> START_TIME = createField("start_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>ehr.participation.start_time_tzid</code>.
	 */
	public final TableField<ParticipationRecord, String> START_TIME_TZID = createField("start_time_tzid", org.jooq.impl.SQLDataType.VARCHAR.length(15), this, "");

	/**
	 * The column <code>ehr.participation.sys_transaction</code>.
	 */
	public final TableField<ParticipationRecord, Timestamp> SYS_TRANSACTION = createField("sys_transaction", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>ehr.participation.sys_period</code>.
	 */
	public final TableField<ParticipationRecord, Object> SYS_PERIOD = createField("sys_period", org.jooq.impl.DefaultDataType.getDefaultDataType("tstzrange"), this, "");

	/**
	 * Create a <code>ehr.participation</code> table reference
	 */
	public Participation() {
		this("participation", null);
	}

	/**
	 * Create an aliased <code>ehr.participation</code> table reference
	 */
	public Participation(String alias) {
		this(alias, PARTICIPATION);
	}

	private Participation(String alias, Table<ParticipationRecord> aliased) {
		this(alias, aliased, null);
	}

	private Participation(String alias, Table<ParticipationRecord> aliased, Field<?>[] parameters) {
		super(alias, Ehr.EHR, aliased, parameters, "define a participating party for an event f.ex.");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ParticipationRecord> getPrimaryKey() {
		return Keys.PARTICIPATION_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ParticipationRecord>> getKeys() {
		return Arrays.<UniqueKey<ParticipationRecord>>asList(Keys.PARTICIPATION_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ParticipationRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ParticipationRecord, ?>>asList(Keys.PARTICIPATION__PARTICIPATION_EVENT_CONTEXT_FKEY, Keys.PARTICIPATION__PARTICIPATION_PERFORMER_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Participation as(String alias) {
		return new Participation(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Participation rename(String name) {
		return new Participation(name, null);
	}
}
